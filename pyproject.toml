[tool.poetry]
name = "llkjj_ml"
version = "0.1.0"
description = "LLKJJ ML Pipeline - PDF Invoice Processing f체r Elektrotechnik-Handwerk UG"
authors = ["Czok12 <your-email@domain.com>"]
packages = [{ include = "llkjj_ml" }, { include = "src" }]

[project]
name = "llkjj_ml"
version = "0.1.0"
description = "LLKJJ ML Pipeline - PDF Invoice Processing f체r Elektrotechnik-Handwerk UG"
authors = [{ name = "Czok12", email = "your-email@domain.com" }]
readme = "README.md"
requires-python = ">=3.12,<3.13"
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3.12",
    "Topic :: Office/Business :: Financial :: Accounting",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
keywords = ["pdf", "invoice", "accounting", "ml", "skr03", "elektrohandwerk"]

dependencies = [
    "docling>=2.44.0,<3.0.0",
    "pandas>=2.2.3,<3.0.0",
    "numpy>=2.0.0,<3.0.0",
    "pydantic>=2.8.0,<3.0.0",
    "spacy>=3.7.6,<4.0.0",
    "sentence-transformers>=5.0.0,<6.0.0",
    "scikit-learn>=1.5.2,<2.0.0",
    "torch>=2.4.1,<3.0.0",                 # Base CPU Version (Default)
    "chromadb>=0.5.5,<1.0.0",
    "python-dotenv>=1.0.1,<2.0.0",
    "tqdm>=4.66.5,<5.0.0",
    "click>=8.1.7,<9.0.0",
    "loguru>=0.7.2,<1.0.0",
    "pydantic-settings>=2.10.1,<3.0.0",
    "requests>=2.32.4,<3.0.0",
    "pymupdf>=1.26.3,<2.0.0",
    "google-genai>=1.30.0,<2.0.0",
    "aiofiles>=24.1.0,<25.0.0",
    "cryptography>=45.0.6,<46.0.0",
    "pytest-asyncio>=1.1.0,<2.0.0",
]

[project.scripts]
llkjj_ml = "main:main"

[project.optional-dependencies]
# F체r legacy/pip-kompatibilit채t
dev = ["pytest", "black", "mypy", "ruff", "pre-commit", "bandit", "safety"]
gpu = ["torch[cuda]>=2.4.1,<3.0.0"]
cuda = ["nvidia-ml-py3>=7.352.0,<8.0.0"]
api = ["fastapi>=0.116.1,<1.0.0", "uvicorn>=0.35.0,<1.0.0"]

[tool.poetry.dependencies]
python = ">=3.12,<3.13"

[tool.poetry.group.dev.dependencies]
pytest = "^8.3.3"
pytest-cov = "^5.0.0"
black = "^24.8.0"
mypy = "^1.11.2"
ruff = "^0.6.4"
pre-commit = "^4.2.0"
bandit = "^1.8.6"
safety = "^3.6.0"
types-pyyaml = "^6.0.12.20250809"
types-requests = "^2.32.4.20250809"
types-psutil = "^7.0.0.20250801"
types-aiofiles = "^24.1.0.20250809"
matplotlib = "^3.10.5"
seaborn = "^0.13.2"
pandas-stubs = "^2.2.0"

[tool.poetry.group.gpu]
optional = true
[tool.poetry.group.gpu.dependencies]
torch = { version = "^2.4.1", extras = ["cuda"], optional = true }

[tool.poetry.group.cuda]
optional = true
[tool.poetry.group.cuda.dependencies]
nvidia-ml-py3 = { version = "^7.352.0", optional = true }

[tool.poetry.group.api]
optional = true
[tool.poetry.group.api.dependencies]
fastapi = "^0.116.1"
uvicorn = "^0.35.0"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.black]
extend-exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''
line-length = 88
target-version = ["py310"]
include = "\\.pyi?$"

[tool.ruff]
target-version = "py310"
line-length = 88

[tool.ruff.lint]
select = ["E", "W", "F", "I", "B", "C4", "UP"]
ignore = ["E501", "B008", "C901"]
per-file-ignores = { "__init__.py" = ["F401"] }

[tool.mypy]
python_version = "3.12"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
strict_equality = true

[[tool.mypy.overrides]]
module = ["fitz", "chromadb.*", "faiss.*", "sentence_transformers.*"]
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = [
    "pydantic",
    "pydantic.*",
    "pydantic_settings",
    "pytest",
    "google.*",
    "torch",
    "cryptography.*",
    "uvicorn",
    "fastapi",
    "aiofiles",
    "psutil",
    "matplotlib",
    "pandas",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = "-v --tb=short"

[tool.coverage.run]
source = ["src"]
omit = ["tests/*", "src/**/__pycache__/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
]
